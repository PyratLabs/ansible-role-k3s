---
- name: Ensure destination k3s kubeconfig exists
  stat:
    path: "{{ k3s_download_kubeconf_path }}/{{ k3s_download_kubeconf_file_name }}"
  register: kubeconfig_local_file
  delegate_to: localhost

- name: Get remote k3s kubeconfig
  ansible.builtin.slurp:
    src: "{{ k3s_config_dir }}/k3s.yaml"
  delegate_to: "{{ k3s_control_delegate }}"
  register: remote_kubeconfig

- name: Get local k3s kubeconfig
  ansible.builtin.slurp:
    src: "{{ k3s_download_kubeconf_path }}/{{ k3s_download_kubeconf_file_name }}"
  delegate_to: localhost
  register: local_kubeconfig
  when: kubeconfig_local_file.stat.exists

- name: Save client certificate data from remote k3s kubeconfig
  ansible.builtin.set_fact:
    remote_cert_data: "{{ remote_kubeconfig['content'] | b64decode | regex_search('(?<=client-certificate-data: ).*') }}"
  when: remote_kubeconfig['content'] is defined

- name: Save client certificate data from local k3s kubeconfig
  ansible.builtin.set_fact:
    local_cert_data: "{{ local_kubeconfig['content'] | b64decode | regex_search('(?<=client-certificate-data: ).*') }}"
  when: local_kubeconfig['content'] is defined

- name: Replase local kubeconfig
  block:
  - name: Ensure destination directory exists
    ansible.builtin.file:
      path: "{{ k3s_download_kubeconf_path }}"
      state: directory
      mode: 0755
    delegate_to: localhost

  - name: Ensure k3s kubeconfig is downloaded to Ansible Controller
    ansible.builtin.fetch:
      src: "{{ k3s_config_dir }}/k3s.yaml"
      dest: "{{ k3s_download_kubeconf_path }}/{{ k3s_download_kubeconf_file_name }}"
      flat: yes
    delegate_to: "{{ k3s_control_delegate }}"
    run_once: true

  - name: Ensure loopback IP is replaced with control-plane address
    ansible.builtin.replace:
      path: "{{ k3s_download_kubeconf_path }}/{{ k3s_download_kubeconf_file_name }}"
      regexp: '127.0.0.1'
      replace: "{{ k3s_registration_address | default(hostvars[k3s_control_delegate].ansible_host) }}"
    delegate_to: localhost
  when: 
   - local_cert_data is not defined or remote_cert_data != local_cert_data
